horizon:
  buildTask:
    image:
      gitStep: horizoncd/base-bash:v1.0.0
      compileStep: horizoncd/base-bash:v1.0.0
      imageStep: horizoncd/podman-bash:v1.0.0
    privileged:
      imageStep: true
    timeout:
      gitStep: 5m
      compileStep:
      imageStep: 60m
    whenExpression:
      - input: "$(params.action)"
        operator: in
        values:
          - "builddeploy"
  checkTask:
    image:
      checkStep: horizoncd/base-bash:v1.1.0
    timeout:
      checkStep: 2m
    whenExpression:
      - input: "$(params.imageURL)"
        operator: notin
        values:
          - ""
  deployTask:
    image:
      deployStep: horizoncd/base-bash:v1.0.0
    timeout:
      deployStep: 5m
    whenExpression: []
    curlDeploy:
      connectTime: 5
      maxTime: 10
      retry: 2
    horizonApiUrl: http://horizon-core.horizoncd.svc.cluster.local
  pipelineRun:
    podTemplate: {}
    dockerfileBaseImage: horizoncd/base-bash:v1.0.0
    baseImage:
      java:
        jdk1.8: maven:3.8.6-openjdk-8
        jdk11: maven:3.8.6-amazoncorretto-11
        jdk17: maven:3.8.6-amazoncorretto-17
      node:
        node16: node:16-alpine3.17
        node20: node:20.5-alpine
      golang:
        golang1.18: golang:1.18-alpine
        golang1.19: golang:1.19-alpine
        golang1.20: golang:1.20-alpine
        golang1.21: golang:1.21-alpine
  ingress:
    hosts: []
  script:
    git: |
      #!/bin/bash
      set -e

      export SOURCE_DIR="/workspace/git-source"
      export GIT_TOKENS_DIR="/workspace/git-token"
      export GIT_REPOSITORY_URL="$(params.gitRepositoryUrl)"
      export GIT_COMMIT="$(params.gitCommit)"
      export GIT_PULL_URL=""

      # config git ssh
      if [ ! -d /root/.ssh ] && [ -d /tekton/home/.ssh ]; then
        rm -rf /root/.ssh && ln -s /tekton/home/.ssh /root
      fi
      if [ -f "/root/.ssh/config" ]; then
        echo -e 'Host *\n    StrictHostKeyChecking no' >> /root/.ssh/config
      fi

      # check https url and match token
      retrieve_pull_url() {
        cd "$GIT_TOKENS_DIR"
        URLs=$(yq '.[].url' git-tokens)
        URLs=($URLs)
        TOKENs=$(yq '.[].token' git-tokens)
        TOKENs=($TOKENs)

        for i in "${!URLs[@]}"
        do
          if [[ "$GIT_REPOSITORY_URL" =~ "${URLs[$i]}" ]]
          then
            if [[ "$GIT_REPOSITORY_URL" =~ "http://" ]]
            then 
              GIT_PULL_URL="http://oauth2:${TOKENs[$i]}@${GIT_REPOSITORY_URL#http://}"
            fi
            if [[ "$GIT_REPOSITORY_URL" =~ "https://" ]]
            then
              GIT_PULL_URL="https://oauth2:${TOKENs[$i]}@${GIT_REPOSITORY_URL#https://}"
            fi
            break
          fi
        done
      } && retrieve_pull_url
      [[ -z "$GIT_PULL_URL" ]] && GIT_PULL_URL="$GIT_REPOSITORY_URL"

      # pull code
      git clone "$GIT_PULL_URL" "$SOURCE_DIR" && {
        cd "$SOURCE_DIR"
        git checkout "$GIT_COMMIT"
        echo "Successfully cloned with commitID: '$GIT_COMMIT'"
      } || exit 1
      # pull submodule
      git submodule update --init --recursive || exit 1
    compile: |
      #!/bin/bash
      set -e

      export APPLICATION="$(params.application)"
      export CLUSTER="$(params.cluster)"
      export ENVIRONMENT="$(params.environment)"
      export PIPELINE_JSON_BLOB='$(params.pipelineJSONBlob)'

      export DOCKERFILE_BASE_IMAGE="{{ .Values.horizon.pipelineRun.dockerfileBaseImage }}"
      export BASE_IMAGE="$DOCKERFILE_BASE_IMAGE"
      export NORMAL_BUILD="normal"
      export DOCKERFILE_BUILD="dockerfile"
      export BUILD_CATEGORY="$(jq -r '.buildType//empty'<<<"$PIPELINE_JSON_BLOB")"
      export LANGUAGE="$(jq -r '.language//empty'<<<"$PIPELINE_JSON_BLOB")"
      export LANGUAGE_ENVIRONMENT="$(jq -r '.environment//empty'<<<"$PIPELINE_JSON_BLOB")"
      export BUILD_TOOL="$(jq -r '.buildInfo.buildTool//empty'<<<"$PIPELINE_JSON_BLOB")"
      export SHELLSCRIPT="$(jq -r '.buildInfo.shellScript//empty'<<<"$PIPELINE_JSON_BLOB")"
      export CUSTOMIZED_ARTIFACTS=($(jq -r '.buildInfo.artifacts//empty'<<<"$PIPELINE_JSON_BLOB" | tr -d '[],"'))
      export DOCKERFILE="$(jq -r '.dockerfile.content//empty'<<<"$PIPELINE_JSON_BLOB")"
      export DOCKERFILE_PATH="$(jq -r '.dockerfile.path//empty'<<<"$PIPELINE_JSON_BLOB")"

      build_type(){
        local BUILD_TYPE=""
        [[ "$BUILD_CATEGORY" == "$NORMAL_BUILD" ]] && BUILD_TYPE="$BUILD_TOOL"
        [[ -z "$BUILD_TYPE" ]] && [[ "$BUILD_CATEGORY" == "$DOCKERFILE_BUILD" ]] && [[ ! -z "$DOCKERFILE" ]] && BUILD_TYPE="dockerfile"
        [[ -z "$BUILD_TYPE" ]] && [[ "$BUILD_CATEGORY" == "$DOCKERFILE_BUILD" ]] && [[ ! -z "$DOCKERFILE_PATH" ]] && BUILD_TYPE="dockerfilePath"
        echo "BUILD_TYPE: ${BUILD_TYPE:-"dockerfile in repo"}" >&2
        echo "$BUILD_TYPE"
      }

      set_base_image(){
        case $LANGUAGE in
          java)
          case $LANGUAGE_ENVIRONMENT in
            JDK1.8)
            BASE_IMAGE={{ index .Values.horizon.pipelineRun.baseImage.java "jdk1.8" }}
            ;;
            JDK11)
            BASE_IMAGE={{ index .Values.horizon.pipelineRun.baseImage.java "jdk11" }}
            ;;
            JDK17)
            BASE_IMAGE={{ index .Values.horizon.pipelineRun.baseImage.java "jdk17" }}
            ;;
          esac
          ;;
          node)
          case $LANGUAGE_ENVIRONMENT in
            node16)
            BASE_IMAGE={{ index .Values.horizon.pipelineRun.baseImage.node "node16" }}
            ;;
            node20)
            BASE_IMAGE={{ index .Values.horizon.pipelineRun.baseImage.node "node20" }}
            ;;
          esac
          ;;
          golang)
          case $LANGUAGE_ENVIRONMENT in
            golang1.18)
            BASE_IMAGE={{ index .Values.horizon.pipelineRun.baseImage.golang "golang1.18" }}
            ;;
            golang1.19)
            BASE_IMAGE={{ index .Values.horizon.pipelineRun.baseImage.golang "golang1.19" }}
            ;;
            golang1.20)
            BASE_IMAGE={{ index .Values.horizon.pipelineRun.baseImage.golang "golang1.20" }}
            ;;
            golang1.21)
            BASE_IMAGE={{ index .Values.horizon.pipelineRun.baseImage.golang "golang1.21" }}
            ;;
          esac
          ;;
        esac
      }

      # debug
      showDockerfile(){
        echo -e "\nDockerfile:"
        cat Dockerfile
      }

      # 根据BUILD_TYPE构建类型准备Dockerfile
      prepare_dockerfile(){
        local BUILD_TYPE="$1"
        # BUILD_TYPE为shell，则添加shell构建的Dockerfile，由系统写入
        [[ "$BUILD_TYPE" == "shell" ]] && {
          # 用户自定义的制品目录数组
          artifacts=$(IFS=" "; echo "${CUSTOMIZED_ARTIFACTS[*]}")

          # 准备构建脚本
          cat >.horizon_build.sh<<<$(echo "$SHELLSCRIPT")

          # 创建Dockerfile
          printf "%s\n" \
          "FROM $BASE_IMAGE as builder" \
          "COPY . /" \
          "RUN cd / && ENVIRONMENT=$ENVIRONMENT sh .horizon_build.sh" \
          "FROM $BASE_IMAGE" \
          "COPY --from=builder ${artifacts[*]} /artifacts/" > Dockerfile
          showDockerfile
          return
        }

        # BUILD_TYPE为Dockerfile，则写入由用户传入的Dockerfile内容
        [[ "$BUILD_TYPE" == "dockerfile" ]] && {
          cat >Dockerfile<<<$(echo "$DOCKERFILE")
        }

        # BUILD_TYPE为dockerfilePath，则检查指定的dockerfilePath是否存在
        [[ "$BUILD_TYPE" == "dockerfilePath" ]] && {
          local DOCKERFILE_ABSOLUTE_PATH="$PWD/${DOCKERFILE_PATH#/}"
          [[ -f "$DOCKERFILE_ABSOLUTE_PATH" ]] || {
            echo "dockerfile:$DOCKERFILE_PATH is not exists!"; return 1
          }
        }

        # 否则，BUILD_TYPE为空，表示使用应用子目录下的Dockerfile
        # 要求应用子目录下的Dockerfile必须存在，否则错误退出
        [[ -z "$BUILD_TYPE" ]] && {
          [[ -f "Dockerfile" ]] || {
          echo "Dockerfile not exists!"; return 1
          }
        }

        echo -e "\nDocker Context:"
        ls -al

        [[ "$BUILD_TYPE" == "dockerfilePath" ]] && {
          echo -e "\n$DOCKERFILE_PATH:"
          cat "$DOCKERFILE_ABSOLUTE_PATH"
        } || {
          echo -e "\nDockerfile:"
          cat Dockerfile
        }
      }

      record_build_info(){
        local BUILD_TYPE="$1"
        # 记录build_type
        cat >$(workspaces.buildinfo.path)/build-type<<<"$BUILD_TYPE"
      }

      main(){
        # 进入git subfolder
        SUBFOLDER=$(params.gitSubfolder)
        SUBFOLDER=${SUBFOLDER#/}
        [[ -z "$SUBFOLDER" ]] || {
          cd "$SUBFOLDER"
        }

        # 获取BUILD_TYPE构建类型
        BUILD_TYPE=$(build_type)

        # 根据输入参数获取dockerfile的基础镜像
        set_base_image

        # 准备dockerfile
        prepare_dockerfile "$BUILD_TYPE"

        # 记录build_type
        record_build_info "$BUILD_TYPE"
      } && main
    image: |
      #!/bin/bash
      set -e

      export BUILD_TYPE="$(cat $(workspaces.buildinfo.path)/build-type)"

      export APPLICATION="$(params.application)"
      export CLUSTER="$(params.cluster)"
      export ENVIRONMENT="$(params.environment)"
      export PIPELINE_JSON_BLOB='$(params.pipelineJSONBlob)'
      export DOCKERFILE_PATH="$(jq -r '.dockerfile.path//empty'<<<"$PIPELINE_JSON_BLOB")"
      export DOCKER_IMAGE="$(params.imageURL)"
      export EXTRA_BUILD_ARGS="$(jq -r '.buildArgs//[] | map("--build-arg " + .name + "=" + .value) | join(" ")' <<< "$PIPELINE_JSON_BLOB")"
      export SUBFOLDER=$(params.gitSubfolder)
      export CONTEXT="/workspace/git-source/${SUBFOLDER#/}"

      [[ "$BUILD_TYPE" != "dockerfilePath" ]] && export DOCKERFILE_PATH="Dockerfile"
      export DOCKERFILE_PATH="${CONTEXT%/}/${DOCKERFILE_PATH#/}"

      echo -e "\nstart building: $DOCKER_IMAGE"

      CMD_BUILD="time podman build --network=host --force-rm \
        --build-arg APPLICATION="$APPLICATION" \
        --build-arg CLUSTER="$CLUSTER" \
        --build-arg ENVIRONMENT="$ENVIRONMENT" \
        "$EXTRA_BUILD_ARGS" \
        --file "$DOCKERFILE_PATH" \
        -t "$DOCKER_IMAGE" "$CONTEXT" "

      CMD_PUSH="time podman push "$DOCKER_IMAGE" && \
        time podman rmi "$DOCKER_IMAGE" "

      eval "$CMD_BUILD" && eval "$CMD_PUSH" && exit 0
      exit 1
    check: |
      #!/bin/bash
      set -e

      export BUILD_CATEGORY="$(jq -r '.buildType//empty'<<<"$PIPELINE_JSON_BLOB")"
      export ACTION="$(params.action)"
      export GIT_REPOSITORY_URL="$(params.gitRepositoryUrl)"
      export IMAGE_URL="$(params.imageURL)"

      is_json(){
        local INPUT="$1"
        [[ ! -z "$(jq -c "objects"<<<"$INPUT" 2>/dev/null)" ]] && return 0 || return 1
      }

      check_non_root() {
        local INPUT="$1"
        local USER=$(echo "$INPUT" | jq -r '.config.User')
        if [[ "$USER" == "0" || "$USER" == "root" ]]; then
          echo "Error: The image runs as root, which is not allowed."
          exit 1
        else
          echo "The image runs as non-root."
          echo "image check passed!"
          exit 0
        fi
      }

      check_image() {
        local image="$1"
        local config=$(crane config $image --insecure 2>/dev/null)
        if is_json "$config"
        then
          check_non_root "$config"
        else
          echo "Error: The image $image is not found."
          exit 1
        fi
      }

      if [[ "$ACTION" == "deploy" ]] && [[ -z "$GIT_REPOSITORY_URL" ]]
      then
        check_image "$IMAGE_URL"
      fi
      echo "image check skipped."
    deploy: |
      #!/bin/bash
      set -eE

      export TOKEN="$(params.token)"
      export APPLICATION="$(params.application)"
      export CLUSTER="$(params.cluster)"
      export CLUSTER_ID="$(params.clusterID)"
      export ENVIRONMENT="$(params.environment)"
      export PIPELINERUN_ID="$(params.pipelinerunID)"
      export IMAGE_URL="$(params.imageURL)"
      export REQUEST_ID="$(params.requestID)"
      export GIT_REPOSITORY_URL="$(params.gitRepositoryUrl)"
      export GIT_COMMIT="$(params.gitCommit)"
      export GIT_BRANCH="$(params.gitBranch)"
      export GIT_TAG="$(params.gitTag)"
      export DEPLOY_RESULT="deploy.res"
      export STATUS_RESULT="status.res"

      log() {
        local LEVEL="${1^^}" && shift
        local DATE_TIME="$(TZ=Asia/Shanghai date +"%Y-%m-%d %H:%M:%S")"
        echo "[$DATE_TIME] $LEVEL - $*" >&2
      }

      err_handler(){
        [[ -f "$STATUS_RESULT" ]] && {
          log INFO "status response: $(cat "$STATUS_RESULT")"; return
        }
        [[ -f "$DEPLOY_RESULT" ]] && {
          log INFO "deploy response: $(cat "$DEPLOY_RESULT")"; return
        }
      } && trap err_handler ERR

      is_json(){
        local INPUT="$1"
        [[ ! -z "$(jq -c "objects"<<<"$INPUT")" ]] && return 0 || return 1
      }

      json_add_kv() {
        local SOURCE="$1"
        local KEY="$2"
        local VALUE="$3"
        if [[ ! -z "$SOURCE" ]] && [[ ! -z "$KEY" ]] && [[ ! -z "$VALUE" ]]
        then
          local JSON=$(jq -n --arg KEY "$KEY" --arg VALUE "$VALUE" '{($KEY):$VALUE}')
          SOURCE=$(echo $SOURCE $JSON | jq -s add)
        fi
        echo "$SOURCE"
      }

      assemble_pipeline_output() {
        # git json
        local GIT_JSON="$(jq -n --arg GIT_REPOSITORY_URL "$GIT_REPOSITORY_URL" \
          --arg GIT_COMMIT "$GIT_COMMIT" \
          '{url:$GIT_REPOSITORY_URL,commitID:$GIT_COMMIT}')"
        GIT_JSON=$(json_add_kv "$GIT_JSON" "branch" "$GIT_BRANCH")
        GIT_JSON=$(json_add_kv "$GIT_JSON" "tag" "$GIT_TAG")
        OUTPUT_JSON="$(jq -n --argjson GIT_JSON "$GIT_JSON" '{git:$GIT_JSON}')"

        # base image
        OUTPUT_JSON=$(json_add_kv "$OUTPUT_JSON" "image" "${IMAGE_URL}")
        echo $(echo $OUTPUT_JSON | jq -cr)
      }

      assemble_body() {
        local PIPELINE_OUTPUT=$(assemble_pipeline_output)
        BODY_JSON="$(jq -n --argjson PIPELINE_OUTPUT "$PIPELINE_OUTPUT" \
          --arg PIPELINERUN_ID "$PIPELINERUN_ID" '{
            output: $PIPELINE_OUTPUT,
            pipelinerunID: $PIPELINERUN_ID | tonumber
          }'
        )"
        echo $(echo $BODY_JSON | jq -cr)
      }

      log INFO "application: $APPLICATION"
      log INFO "cluster: $CLUSTER"
      log INFO "environment: $ENVIRONMENT"

      # invoke horizon api
      do_http(){
        local METHOD="$1" URI="$2"
        local URL="$HORIZON_API_URL/${URI#/}"
        local ARGS=() DATA CONNECT_TIMEOUT MAX_TIME RETRY OUTPUT

        while ARG="$1" && shift; do
          case "$ARG" in
          "--connect-timeout")
            CONNECT_TIMEOUT="$1" && shift || break
            ARGS=("${ARGS[@]}" "--connect-timeout" "$CONNECT_TIMEOUT")
            ;;
          "-m"|"--max-time")
            MAX_TIME="$1" && shift || break
            ARGS=("${ARGS[@]}" "--max-time" "$MAX_TIME")
            ;;
          "--retry")
            RETRY="$1" && shift || break
            ARGS=("${ARGS[@]}" "--retry" "$RETRY")
            ;;
          "-d"|"--data")
            # DATA must be a json string
            DATA="$1" && DATA="$(echo "$DATA" | jq -cr)" && shift || break
            ARGS=("${ARGS[@]}" "-d" "'$DATA'")
            ;;
          "-o")
            OUTPUT="$1" && shift || break
            ;;
          *)
            shift
            ;;
          esac
        done

        CONTENT_TYPE="application/json"
        ARGS=("${ARGS[@]}" "-X" "$METHOD")
        ARGS=("${ARGS[@]}" "-H" "'Content-Type: $CONTENT_TYPE'" \
                            "-H" "'X-Horizon-JWT-Token: $TOKEN'" \
                            "-H" "'X-Request-Id: $REQUEST_ID'" )
        CMD="curl -k -sSL "${ARGS[@]}" \
                    "$([[ ! -z "$OUTPUT" ]] && echo "-o $OUTPUT")" '$URL'"
        eval "$CMD"
      }

      deploy(){
        local DEPLOY_URI="/apis/internal/v2/clusters/$CLUSTER_ID/deploy"
        local RESPONSE CODE
        local REQUEST_BODY=$(assemble_body)

        if [[ -z "$TOKEN" ]]; then
          log ERR "token for callback is empty!"; return 1
        fi

        do_http POST "$DEPLOY_URI" --connect-timeout "$CURL_CONNECT_TIME" \
          --max-time "$CURL_MAX_TIME" \
          --retry "$CURL_RETRY" \
          -d "$REQUEST_BODY" -o "$DEPLOY_RESULT"

        [[ -f "$DEPLOY_RESULT" ]] && RESPONSE="$(cat "$DEPLOY_RESULT")" || {
          log ERR "the response of deploy is empty";
          log ERR "deplay failed!"
          return 1
        }
        if ! is_json "$RESPONSE"; then
          log ERR "the response of deploy is not expected as json format, the response is: $RESPONSE"; return 1
        fi
        ERROR_CODE=$(jq -r '.errorCode//empty'<<<"$RESPONSE")
        [[ -z "$ERROR_CODE" ]] || {
          log ERR "deploy failed!"
          log ERR "response body: $RESPONSE"
          return 1
        }
        log INFO "deploy successfully!"
      }
      deploy
auth:
  dockerConfigJson: {}
podmanConfig: |
  [registries.search]
  unqualified-search-registries = ['docker.io']
  registries = ['docker.io']
  [registries.insecure]
  registries = ['horizon-registry.horizoncd.svc.cluster.local']
gitRepos:
  ssh: []
#    - url: gitlab.com
#      privateKey: |
#        -----BEGIN OPENSSH PRIVATE KEY-----
#        ...
#        -----END OPENSSH PRIVATE KEY-----
  http: []
#    - url: github.com
#      token: 1234567890
eventListener:
  replicas: 1
extraVolumeMounts: []
# When set true, custom resources of tekton triggers like EventListener are rendered based on tekton triggers whose version is above v0.17.0.
enableV1betaEventListener: true
